[
  {
    "name": "simple_client.go",
    "content": "/*\r\nCopyright (C) 2023 Cloud Temple\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n*/\r\npackage main\r\n\r\nimport (\r\n    \"context\"\r\n    \"fmt\"\r\n    \"log\"\r\n\r\n    \"github.com/chrlesur/aiyou.golib\"\r\n)\r\n\r\nfunc main() {\r\n    client, err := aiyou.NewClient(\"your-email@example.com\", \"your-password\")\r\n    if err != nil {\r\n        log.Fatalf(\"Error creating client: %v\", err)\r\n    }\r\n\r\n    ctx := context.Background()\r\n\r\n    // Example of using an authenticated method\r\n    response, err := client.AuthenticatedRequest(ctx, \"GET\", \"/api/some-endpoint\", nil)\r\n    if err != nil {\r\n        log.Fatalf(\"Error calling authenticated method: %v\", err)\r\n    }\r\n    defer response.Body.Close()\r\n\r\n    fmt.Printf(\"Response status: %s\\n\", response.Status)\r\n}",
    "size": 1317,
    "modTime": "2024-11-21T15:09:12.397456+01:00",
    "path": "examples\\simple_client.go"
  },
  {
    "name": "auth.go",
    "content": "/*\nCopyright (C) 2023 Cloud Temple\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\n// Package aiyou provides authentication functionalities for the AI.YOU API.\npackage aiyou\n\nimport (\n    \"bytes\"\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"net/http\"\n    \"time\"\n)\n\n// JWTAuthenticator implements the Authenticator interface for JWT-based authentication.\ntype JWTAuthenticator struct {\n    email    string\n    password string\n    token    string\n    expiry   time.Time\n    client   *http.Client\n    baseURL  string\n}\n\n// NewJWTAuthenticator creates a new instance of JWTAuthenticator.\nfunc NewJWTAuthenticator(email, password, baseURL string, client *http.Client) *JWTAuthenticator {\n    return \u0026JWTAuthenticator{\n        email:    email,\n        password: password,\n        baseURL:  baseURL,\n        client:   client,\n    }\n}\n\n// Authenticate performs the authentication process and obtains a JWT token.\nfunc (a *JWTAuthenticator) Authenticate(ctx context.Context) error {\n    if !a.tokenExpired() {\n        return nil\n    }\n\n    loginReq := LoginRequest{\n        Email:    a.email,\n        Password: a.password,\n    }\n\n    jsonData, err := json.Marshal(loginReq)\n    if err != nil {\n        return fmt.Errorf(\"failed to marshal login request: %w\", err)\n    }\n\n    req, err := http.NewRequestWithContext(ctx, \"POST\", a.baseURL+\"/api/login\", bytes.NewBuffer(jsonData))\n    if err != nil {\n        return fmt.Errorf(\"failed to create login request: %w\", err)\n    }\n\n    req.Header.Set(\"Content-Type\", \"application/json\")\n\n    resp, err := a.client.Do(req)\n    if err != nil {\n        return fmt.Errorf(\"failed to send login request: %w\", err)\n    }\n    defer resp.Body.Close()\n\n    if resp.StatusCode != http.StatusOK {\n        return fmt.Errorf(\"authentication failed with status code: %d\", resp.StatusCode)\n    }\n\n    var loginResp LoginResponse\n    if err := json.NewDecoder(resp.Body).Decode(\u0026loginResp); err != nil {\n        return fmt.Errorf(\"failed to decode login response: %w\", err)\n    }\n\n    a.token = loginResp.Token\n    a.expiry = loginResp.ExpiresAt\n\n    return nil\n}\n\n// Token returns the current JWT token.\nfunc (a *JWTAuthenticator) Token() string {\n    return a.token\n}\n\n// tokenExpired checks if the current token has expired.\nfunc (a *JWTAuthenticator) tokenExpired() bool {\n    return a.token == \"\" || time.Now().After(a.expiry)\n}\n",
    "size": 2925,
    "modTime": "2024-11-21T15:06:37.1127856+01:00",
    "path": "pkg\\aiyou\\auth.go"
  },
  {
    "name": "auth_test.go",
    "content": "/*\r\nCopyright (C) 2023 Cloud Temple\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n*/\r\npackage aiyou\r\n\r\nimport (\r\n    \"context\"\r\n    \"net/http\"\r\n    \"net/http/httptest\"\r\n    \"testing\"\r\n    \"time\"\r\n)\r\n\r\nfunc TestJWTAuthenticator_Authenticate(t *testing.T) {\r\n    // Créer un serveur de test\r\n    server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n        if r.URL.Path != \"/api/login\" {\r\n            t.Errorf(\"Expected to request '/api/login', got: %s\", r.URL.Path)\r\n        }\r\n        if r.Header.Get(\"Content-Type\") != \"application/json\" {\r\n            t.Errorf(\"Expected Content-Type: application/json, got: %s\", r.Header.Get(\"Content-Type\"))\r\n        }\r\n        w.WriteHeader(http.StatusOK)\r\n        w.Write([]byte(`{\"token\":\"test_token\",\"expires_at\":\"2023-01-01T00:00:00Z\",\"user\":{\"id\":\"1\",\"email\":\"test@example.com\"}}`))\r\n    }))\r\n    defer server.Close()\r\n\r\n    auth := NewJWTAuthenticator(\"test@example.com\", \"password\", server.URL, server.Client())\r\n\r\n    ctx := context.Background()\r\n    err := auth.Authenticate(ctx)\r\n\r\n    if err != nil {\r\n        t.Errorf(\"Authenticate returned an error: %v\", err)\r\n    }\r\n\r\n    if auth.Token() != \"test_token\" {\r\n        t.Errorf(\"Expected token to be 'test_token', got: %s\", auth.Token())\r\n    }\r\n}\r\n\r\nfunc TestJWTAuthenticator_TokenExpired(t *testing.T) {\r\n    auth := \u0026JWTAuthenticator{\r\n        token:  \"expired_token\",\r\n        expiry: time.Now().Add(-1 * time.Hour),\r\n    }\r\n\r\n    if !auth.tokenExpired() {\r\n        t.Error(\"Expected token to be expired\")\r\n    }\r\n\r\n    auth.expiry = time.Now().Add(1 * time.Hour)\r\n    if auth.tokenExpired() {\r\n        t.Error(\"Expected token to not be expired\")\r\n    }\r\n}",
    "size": 2284,
    "modTime": "2024-11-21T15:09:19.6779819+01:00",
    "path": "pkg\\aiyou\\auth_test.go"
  },
  {
    "name": "client.go",
    "content": "/*\nCopyright (C) 2023 Cloud Temple\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\n// Package aiyou provides a client for interacting with the AI.YOU API from Cloud Temple.\npackage aiyou\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\n// Client represents a client for the AI.YOU API.\ntype Client struct {\n\tbaseURL    string\n\thttpClient *http.Client\n\tlogger     *log.Logger\n\tauth       Authenticator\n}\n\n// NewClient creates a new instance of Client with the given email and password.\nfunc NewClient(email, password string, options ...ClientOption) (*Client, error) {\n\tclient := \u0026Client{\n\t\tbaseURL:    \"https://api.aiyou.com\", // URL de base par défaut\n\t\thttpClient: \u0026http.Client{Timeout: 30 * time.Second},\n\t\tlogger:     log.New(log.Writer(), \"aiyou: \", log.LstdFlags),\n\t}\n\n\tfor _, option := range options {\n\t\toption(client)\n\t}\n\n\tauth := NewJWTAuthenticator(email, password, client.baseURL, client.httpClient)\n\tclient.auth = auth\n\n\treturn client, nil\n}\n\n// AuthenticatedRequest performs an authenticated request to the API.\nfunc (c *Client) AuthenticatedRequest(ctx context.Context, method, path string, body interface{}) (*http.Response, error) {\n\tif err := c.auth.Authenticate(ctx); err != nil {\n\t\treturn nil, err\n\t}\n\n\treq, err := http.NewRequestWithContext(ctx, method, c.baseURL+path, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treq.Header.Set(\"Authorization\", \"Bearer \"+c.auth.Token())\n\n\t// Ajoutez ici la logique pour ajouter le corps de la requête si nécessaire\n\n\treturn c.httpClient.Do(req)\n}\n\n// SetBaseURL sets the base URL for API requests.\nfunc (c *Client) SetBaseURL(url string) {\n\tc.baseURL = url\n}\n\n// SetLogger sets the logger for the client.\nfunc (c *Client) SetLogger(logger *log.Logger) {\n\tc.logger = logger\n}\n",
    "size": 2306,
    "modTime": "2024-11-21T15:07:34.2802535+01:00",
    "path": "pkg\\aiyou\\client.go"
  },
  {
    "name": "config.go",
    "content": "/*\r\nCopyright (C) 2023 Cloud Temple\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n*/\r\npackage aiyou\r\n\r\nimport (\r\n    \"errors\"\r\n    \"time\"\r\n)\r\n\r\n// Config contient les paramètres de configuration pour le client AI.YOU.\r\ntype Config struct {\r\n    BaseURL    string\r\n    APIKey     string\r\n    Timeout    time.Duration\r\n    RetryCount int\r\n}\r\n\r\n// Validate vérifie que la configuration est valide.\r\nfunc (c *Config) Validate() error {\r\n    if c.BaseURL == \"\" {\r\n        return errors.New(\"BaseURL est requis\")\r\n    }\r\n    if c.APIKey == \"\" {\r\n        return errors.New(\"APIKey est requis\")\r\n    }\r\n    if c.Timeout \u003c= 0 {\r\n        c.Timeout = 30 * time.Second // Valeur par défaut\r\n    }\r\n    if c.RetryCount \u003c 0 {\r\n        c.RetryCount = 0\r\n    }\r\n    return nil\r\n}",
    "size": 1348,
    "modTime": "2024-11-21T13:57:50.9309087+01:00",
    "path": "pkg\\aiyou\\config.go"
  },
  {
    "name": "errors.go",
    "content": "",
    "size": 0,
    "modTime": "2024-11-20T10:44:19.6000093+01:00",
    "path": "pkg\\aiyou\\errors.go"
  },
  {
    "name": "types.go",
    "content": "/*\nCopyright (C) 2023 Cloud Temple\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n*/\n\n// Package aiyou defines types used across the AI.YOU API client.\npackage aiyou\n\nimport (\n    \"context\"\n    \"time\"\n)\n// Authenticator manages authentication for API requests.\ntype Authenticator interface {\n    Authenticate(ctx context.Context) error\n    Token() string\n}\n\n// LoginRequest represents the login request payload.\ntype LoginRequest struct {\n    Email    string `json:\"email\"`\n    Password string `json:\"password\"`\n}\n\n// LoginResponse represents the login response from the API.\ntype LoginResponse struct {\n    Token     string    `json:\"token\"`\n    ExpiresAt time.Time `json:\"expires_at\"`\n    User      User      `json:\"user\"`\n}\n\n// User represents a user in the AI.YOU system.\ntype User struct {\n    ID           string `json:\"id\"`\n    Email        string `json:\"email\"`\n    ProfileImage string `json:\"profileImage\"`\n    FirstName    string `json:\"firstName\"`\n}\n\n// ChatCompleter gère les requêtes de complétion de chat.\ntype ChatCompleter interface {\n    Complete(ctx context.Context, input ChatCompletionInput) (*ChatCompletionOutput, error)\n}\n\n// ChatCompletionInput représente l'entrée pour une requête de complétion de chat.\ntype ChatCompletionInput struct {\n    Messages []Message\n    // Autres champs à ajouter selon la spécification de l'API\n}\n\n// ChatCompletionOutput représente la sortie d'une requête de complétion de chat.\ntype ChatCompletionOutput struct {\n    Response string\n    // Autres champs à ajouter selon la spécification de l'API\n}\n\n// Message représente un message dans une conversation.\ntype Message struct {\n    Role    string `json:\"role\"`\n    Content string `json:\"content\"`\n}\n",
    "size": 2286,
    "modTime": "2024-11-21T15:08:14.1188877+01:00",
    "path": "pkg\\aiyou\\types.go"
  }
]